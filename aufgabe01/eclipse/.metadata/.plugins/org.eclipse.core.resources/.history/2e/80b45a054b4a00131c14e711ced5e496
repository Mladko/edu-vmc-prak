package whs.vmc.prak1;

import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.sql.Date;
import java.text.DecimalFormat;
import java.util.ArrayList;

import android.app.Activity;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.Window;
import android.widget.Button;
import android.widget.TextView;

import com.example.vmc1.R;

public class SpeedtestActivity extends Activity {

	// 100 MS
	private final static int UPDATE_THRESHOLD = 100;
	private static final String SERVER_PATH = "http://speedtest.qsc.de/1MB.qsc";
	private SpeedTestHandler speedTestHandler;
	private DownloadThread downloadThread;

	// Messwerte
	private ArrayList<Double> downloadedPerPackage;
	private ArrayList<Long> timeForPackage;
	private long connectionTime = 0;
	private long currentFileSize = 0;
	private long ping = 0;
	private long fileSize;

	// Ergebnis
	public static double ergebnis = 0.0;

	private Button mBtnStart;
	private TextView mTxtSpeed;
	private TextView mTxtConnectionSpeed;
	private TextView mTxtProgress;
	private TextView resultTextView;
	private DecimalFormat dF;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		dF = new DecimalFormat("##.##");
		requestWindowFeature(Window.FEATURE_PROGRESS);
		setContentView(R.layout.speedtest);
		resultTextView = (TextView) findViewById(R.id.text1);
		resultTextView.setTextSize(9);
		bindListeners();
		ergebnis = 0.0;

	}

	private void bindListeners() {
		mBtnStart = (Button) findViewById(R.id.btnStart);
		mTxtSpeed = (TextView) findViewById(R.id.speed);
		mTxtConnectionSpeed = (TextView) findViewById(R.id.connectionspeeed);
		mTxtProgress = (TextView) findViewById(R.id.progress);

		mBtnStart.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(final View view) {
				setProgressBarVisibility(true);
				mTxtSpeed.setText("Test started");
				mBtnStart.setEnabled(false);
				speedTestHandler = new SpeedTestHandler();
				downloadThread = new DownloadThread();
				downloadThread.start();
				// new Thread(speedtesterRun).start();
			}
		});
	}

	public Long getOverallSpeed() {
		return ((fileSize / getOverallTime()) * 1000) / 1000;
	}

	public Long getOverallTime() {
		return (getCurrentDuration() + connectionTime);
	}

	public Long getCurrentDuration() {

		Long duration = 0L;

		for (Long d : timeForPackage) {
			duration += d;
		}

		return duration;

	}

	
	public Double getSpeed(int pos) {

		return ((downloadedPerPackage.get(pos) / timeForPackage.get(pos)) * 1000) / 1000;
	}

	public Double getMinSpeed() {

		Double minSpeed = getSpeed(0);

		for (int i = 0; i < downloadedPerPackage.size(); i++) {
			if (minSpeed > getSpeed(i)) {
				minSpeed = getSpeed(i);
			}
		}

		return minSpeed;
	}

	public Double getMaxSpeed() {

		Double maxSpeed = getSpeed(0);

		for (int i = 0; i < downloadedPerPackage.size(); i++) {
			if (maxSpeed < getSpeed(i)) {
				maxSpeed = getSpeed(i);
			}
		}

		return maxSpeed;
	}

	public Double getAvgSpeed() {

		Double sumSpeed = 0.0;
		Double avgSpeed = 0.0;

		for (int i = 0; i < downloadedPerPackage.size(); i++) {
			sumSpeed += getSpeed(i);
		}
		avgSpeed = sumSpeed / downloadedPerPackage.size();

		return avgSpeed;
	}

	public static int getUpdateThreshold() {
		return UPDATE_THRESHOLD;
	}

	class SpeedTestHandler extends Handler {
		@Override
		public void handleMessage(Message msg) {
			super.handleMessage(msg);

			double prozent = currentFileSize * 100.0 / fileSize;

			// 98% Da es oefter zu Ungenauigkeiten kommen kann.
			if (prozent >= (double) 98) {

				setInformationTextView();

				NetworkInformations.speed_old = false;
				SpeedtestActivity.ergebnis = getAvgSpeed();

			}
			mTxtConnectionSpeed.setText(0 + currentFileSize + " Byte von "
					+ fileSize + " downloaded");

			mTxtSpeed.setText("Geschwindigkeit: "
					+ dF.format(getSpeed(downloadedPerPackage.size() - 1))
					+ " kB/s");

			setProgress((int) (prozent + 0));

			mTxtProgress.setText("Dauer: " + getCurrentDuration() + " ms ");

		}

		private void setInformationTextView() {
			long downloadTime = 0;
			String result = "Download Info: - ";
			for(int i = 0 ; i < downloadedPerPackage.size(); i++){
				result += "Data: " + downloadedPerPackage.get(i) + " Time " + timeForPackage.get(i)+ " ms " +" Speed: "+ getSpeed(i) +" kb/s" + '\n';
				downloadTime += timeForPackage.get(i);
				
			}

			result += "\n";
			result += "Latenz: " + ping + " ms\n";
			result += "Download time: " + downloadTime + " ms\n";
			result += "Overall time: " + getOverallTime() + " ms\n";
			result += "\n";
			result += "Download AverageSpeed: " + getAvgSpeed() + "kb/s";
			result += "Download MaxSpeed:" + getMaxSpeed() + " kb/s";
			result += "Download MinSpeed: " + getMinSpeed() + " kb/s";
			result += "Download OverallSpeed: " + getOverallSpeed() + " kb/s";
			ergebnis = getAvgSpeed();

			Log.i("Result" ,"Result "+ result);
			resultTextView.setText(result);
		}
	}

	/**
	 * Aufgabe 2 Implementieren Sie sinngemaess der 
	 * Aufgabenstellung den DownloadThread.
	 */
//	public class DownloadThread extends Thread {
//		HttpURLConnection con = null;
//		URL url = null;
//		InputStream stream;
//
//		@Override
//		public void run() {
//			super.run();
//			
//			try {
//				url = new URL(SERVER_PATH);
//				con = (HttpURLConnection) url.openConnection();
//				stream = con.getInputStream();
//				
//				Date currentDate = new Date(System.currentTimeMillis());
//				long startTime = System.currentTimeMillis();
//				
//				downloadedPerPackage = new ArrayList<Double>();
//				timeForPackage = new ArrayList<Long>();
//				long counter = 0;
//				
//				fileSize = con.getContentLength();
//				ping = startTime - currentDate.getTime();
//				currentFileSize = 0;
//				
//				while (stream.read() != -1) {
//					SpeedtestActivity.this.currentFileSize++;
//					counter++;
//					
//					long actualTime = System.currentTimeMillis();
//					if(actualTime >= (startTime + SpeedtestActivity.getUpdateThreshold() + 100)) {
//						downloadedPerPackage.add((double) counter);
//						timeForPackage.add((actualTime - (startTime)));
//						speedTestHandler.sendEmptyMessage(0);
//						counter= 0;
//						startTime = System.currentTimeMillis();
//					}
//				}
//				
//				Log.i("Download" ,"Download beendet "+timeForPackage.size());
//				speedTestHandler.sendEmptyMessage(0);
//				stream.close();
//				con.disconnect();
//			} catch (IOException e) {
//				con.disconnect();
//				e.printStackTrace();
//			}
//
//		}
//	}
	public class DownloadThread extends Thread {
		HttpURLConnection con = null;
		URL url = null;
		InputStream stream ;
		int temp;
		//byte[] size = new byte[1048576];
		int i = 0;
		private static final long EXPECTED_SIZE_IN_BYTES = 1048576; //1MB 1024*1024
		
		@Override
		public void run() {
			super.run();
			
			
			try {
				 
				 url = new URL(SERVER_PATH);
				 
				
				 
				 downloadedPerPackage = new ArrayList<Double>();
				 
				 timeForPackage = new ArrayList<Long>();
				 long counter = 0;
				 Date tempDate = new Date(System.currentTimeMillis());

				 con = (HttpURLConnection) url.openConnection();
				 ping = System.currentTimeMillis() - tempDate.getTime();
				 fileSize = con.getContentLength();
				 long testTime = System.currentTimeMillis() ;
				 stream = con.getInputStream();
				 //tempDate = new Date(System.currentTimeMillis());
				 currentFileSize = 0;
				 while ((stream.read() != -1 )) {
					
					currentFileSize++;
					counter++;
					
					long actualTime = System.currentTimeMillis() ;
					
					
					if(actualTime >= testTime + UPDATE_THRESHOLD +100) {
						
						 downloadedPerPackage.add((double) counter);
						 
						 
						 timeForPackage.add((actualTime - (testTime)));
						
						 speedTestHandler.sendEmptyMessage(0);
						 counter= 0;
						 testTime = System.currentTimeMillis();
						
					 }
					
					 
	             }
				Log.i("Download" ,"Download beendet "+timeForPackage.size());
				speedTestHandler.sendEmptyMessage(0);
				stream.close();
				con.disconnect();
			} catch (IOException e) {
				con.disconnect();
//				try {
//					//stream.close();
//					Log.i("Stream" ,"Stream closed");
//				} catch (IOException e1) {
//					// TODO Auto-generated catch block
//					e1.printStackTrace();
//				}
				e.printStackTrace();
			}
			

		}
	
	}
}
